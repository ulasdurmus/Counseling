// <auto-generated />
using System;
using Counseling.Data.Concrete.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Counseling.Data.Migrations
{
    [DbContext(typeof(CounselingContext))]
    [Migration("20230507152844_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.4");

            modelBuilder.Entity("Counseling.Entity.Concrete.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClientId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ClientServiceClientId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ClientServiceServiceId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ClientTherapistClientId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ClientTherapistTherapistId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("ServiceId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ClientServiceClientId", "ClientServiceServiceId");

                    b.HasIndex("ClientTherapistClientId", "ClientTherapistTherapistId");

                    b.ToTable("Reservation");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClientId = 1,
                            IsConfirmed = true,
                            Price = 500m,
                            ReservationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ServiceId = 1
                        },
                        new
                        {
                            Id = 2,
                            ClientId = 2,
                            IsConfirmed = true,
                            Price = 500m,
                            ReservationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ServiceId = 2
                        },
                        new
                        {
                            Id = 3,
                            ClientId = 3,
                            IsConfirmed = true,
                            Price = 500m,
                            ReservationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ServiceId = 3
                        });
                });

            modelBuilder.Entity("Counseling.Entity.Entity.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Bireylerin duygusal, zihinsel ve davranışsal sorunlarını değerlendirmek ve bireysel olarak danışmanlık sağlamak.",
                            IsApproved = true,
                            IsDeleted = false,
                            Name = "Bireysel Danışmanlık",
                            Url = "bireysel-danismanlik"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Çiftler ve aileler arasındaki ilişki sorunlarını değerlendirmek ve terapi yöntemleri kullanarak çiftler ve ailelerle danışmanlık sağlamak.",
                            IsApproved = true,
                            IsDeleted = false,
                            Name = "Çift ve Aile Danışmanlığı",
                            Url = "cift-ve-aile-danismanligi"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Ergenlerin duygusal, sosyal ve davranışsal gelişimini desteklemek, ergenlerle danışmanlık yapmak ve onlara rehberlik etmek.",
                            IsApproved = true,
                            IsDeleted = false,
                            Name = "Ergen Danışmanlığı",
                            Url = "ergen-danismanligi"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Madde bağımlılığı veya diğer bağımlılıklarla mücadele eden bireylere danışmanlık sağlamak, bağımlılıkları değerlendirmek ve tedavi planları oluşturmak.",
                            IsApproved = true,
                            IsDeleted = false,
                            Name = "Bağımlılık Danışmanlığı",
                            Url = "bagimlilik-danismanligi"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Krize giren bireylere destek sağlamak, travma sonrası stres bozukluğu ve diğer travma reaksiyonlarına müdahale etmek, travma sonrası iyileşmeyi desteklemek.",
                            IsApproved = true,
                            IsDeleted = false,
                            Name = "Kriz ve Travma Danışmanlığı",
                            Url = "kriz-ve-tramva-danismanligi"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Bireylerin sosyal becerilerini geliştirmek, iletişim, ilişki kurma, sınır koyma gibi sosyal becerileri öğretmek ve desteklemek.",
                            IsApproved = true,
                            IsDeleted = false,
                            Name = "Sosyal Beceri Eğitimi",
                            Url = "sosyal-beceri-egitimi"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Bireylerin kendini değerlendirmesine ve keşfetmesine yardımcı olmak, güçlü yönleri ve zorlukları tanımak ve kişisel büyümeyi desteklemek.",
                            IsApproved = true,
                            IsDeleted = false,
                            Name = "Öz-değerlendirme ve Kendini Keşfetme",
                            Url = "oz-fegerlendirme-ve-kendini-kesfetme"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Bireylerin yaşam değişimleri, dönem geçişleri ve adaptasyon süreçlerine danışmanlık sağlamak, değişime uyum sürecini desteklemek ve başa çıkma becerilerini geliştirmek.",
                            IsApproved = true,
                            IsDeleted = false,
                            Name = "Yaşam Değişimleri ve Geçişler",
                            Url = "yasam-degisimi-ve-gecisler"
                        });
                });

            modelBuilder.Entity("Counseling.Entity.Entity.Certificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("PdfUrl")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int?>("TherapistId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TherapistId");

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("Counseling.Entity.Entity.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsApproved = true,
                            Url = "1",
                            UserId = "5c4080ce-3cee-4051-8660-4b7f208681ce"
                        },
                        new
                        {
                            Id = 2,
                            IsApproved = false,
                            Url = "2",
                            UserId = "d9034f11-8877-4c14-ae85-442d2449b547"
                        },
                        new
                        {
                            Id = 3,
                            IsApproved = true,
                            Url = "3",
                            UserId = "0f80dbad-d5f4-4f82-a780-165aa66b7d07"
                        });
                });

            modelBuilder.Entity("Counseling.Entity.Entity.ClientService", b =>
                {
                    b.Property<int>("ClientId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ServiceId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ClientId", "ServiceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ClientServices");

                    b.HasData(
                        new
                        {
                            ClientId = 1,
                            ServiceId = 1
                        },
                        new
                        {
                            ClientId = 1,
                            ServiceId = 2
                        },
                        new
                        {
                            ClientId = 1,
                            ServiceId = 3
                        },
                        new
                        {
                            ClientId = 2,
                            ServiceId = 2
                        },
                        new
                        {
                            ClientId = 2,
                            ServiceId = 3
                        },
                        new
                        {
                            ClientId = 3,
                            ServiceId = 1
                        },
                        new
                        {
                            ClientId = 3,
                            ServiceId = 2
                        },
                        new
                        {
                            ClientId = 3,
                            ServiceId = 3
                        });
                });

            modelBuilder.Entity("Counseling.Entity.Entity.ClientTherapist", b =>
                {
                    b.Property<int>("ClientId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TherapistId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ClientId", "TherapistId");

                    b.HasIndex("TherapistId");

                    b.ToTable("ClientTherapists");

                    b.HasData(
                        new
                        {
                            ClientId = 1,
                            TherapistId = 3
                        },
                        new
                        {
                            ClientId = 1,
                            TherapistId = 2
                        },
                        new
                        {
                            ClientId = 1,
                            TherapistId = 1
                        });
                });

            modelBuilder.Entity("Counseling.Entity.Entity.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Psikoloji"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Rehberlik ve Psikolojik Danışmanlık"
                        });
                });

            modelBuilder.Entity("Counseling.Entity.Entity.Education", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DepartmentId")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EndedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartedDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UniversityId")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UniversityId");

                    b.ToTable("Educations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DepartmentId = 1,
                            EndedDate = new DateTime(2014, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartedDate = new DateTime(2010, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UniversityId = 1
                        },
                        new
                        {
                            Id = 2,
                            DepartmentId = 2,
                            EndedDate = new DateTime(209, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartedDate = new DateTime(2005, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UniversityId = 2
                        },
                        new
                        {
                            Id = 3,
                            DepartmentId = 1,
                            EndedDate = new DateTime(2018, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartedDate = new DateTime(2013, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UniversityId = 3
                        });
                });

            modelBuilder.Entity("Counseling.Entity.Entity.Identitiy.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "f189930b-5dd4-4088-b246-438f75481c4a",
                            Description = "Tam yönetim hakkı bulunur.",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = "7192fa71-cef8-4480-a9d6-c514c42c1d1b",
                            Description = "Kısıtlı yönetim hakkı bulunur.",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "eb1774ff-20bd-48df-8cf8-7b3b10a1f9df",
                            Description = "Kendilerine özel, kısıtlı izin verilmiş admin paneline sahip olabilir.",
                            Name = "Therapist",
                            NormalizedName = "THERAPIST"
                        },
                        new
                        {
                            Id = "82cfe151-6703-4c5e-aa82-c653d00bb7ba",
                            Description = "Kendilerine özel, hesap bilgilerini yöenetbilecekleri bir panele sahip olurlar.",
                            Name = "Client",
                            NormalizedName = "CLIENT"
                        });
                });

            modelBuilder.Entity("Counseling.Entity.Entity.Identitiy.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfRegistration")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ImageId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b7082603-2d69-4adc-bc4e-1e294a75cd5a",
                            AccessFailedCount = 0,
                            Address = "Çekmeköy",
                            ConcurrencyStamp = "8165c395-4ac5-45e5-8fbe-f14e84ffa4b7",
                            DateOfBirth = new DateTime(1999, 12, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfRegistration = new DateTime(2023, 5, 7, 18, 28, 42, 960, DateTimeKind.Local).AddTicks(9831),
                            Email = "ulasdurmus1@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ulaş",
                            Gender = "Erkek",
                            LastName = "Durmuş",
                            LockoutEnabled = false,
                            NormalizedEmail = "ULASDURMUS1@GMAIL.COM",
                            NormalizedName = "ULAŞDURMUŞ",
                            NormalizedUserName = "ULASDURMUS",
                            PasswordHash = "AQAAAAIAAYagAAAAENcnSnZSts6GueOLtMxqDi8x6rFwmNVWTuuSgyNLsS65w2Z1sK2/w2EwYP88uhJqIw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c4714fa4-73b0-43b7-97ed-c79998a38d07",
                            TwoFactorEnabled = false,
                            UserName = "ulasdurmus"
                        },
                        new
                        {
                            Id = "eba9d9f5-bcde-4039-8e38-2f3292ed46b6",
                            AccessFailedCount = 0,
                            Address = "5678 Oak Avenue, Los Angeles",
                            ConcurrencyStamp = "c38da39f-601d-426c-85da-699eda838cc5",
                            DateOfBirth = new DateTime(1985, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfRegistration = new DateTime(2023, 5, 7, 18, 28, 42, 960, DateTimeKind.Local).AddTicks(9873),
                            Email = "alice.johnson@example.com",
                            EmailConfirmed = true,
                            FirstName = "Alice",
                            Gender = "Female",
                            LastName = "Johnson",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALICE.JOHNSON@EXAMPLE.COM",
                            NormalizedName = "ALİCEJOHNSON",
                            NormalizedUserName = "ALICEJ",
                            PasswordHash = "AQAAAAIAAYagAAAAEPFn/P2zvkcS67XuFGSchaqQqqoo1eE/LAFJyIetqwKC4SXiMGhemXfxTNP3vX245w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "91538c20-a138-4396-bf92-b12cca4d3069",
                            TwoFactorEnabled = false,
                            UserName = "alicej"
                        },
                        new
                        {
                            Id = "86babe7e-9dea-4cf2-9faf-4439b64d13ba",
                            AccessFailedCount = 0,
                            Address = "1234 Elm Street, Springfield",
                            ConcurrencyStamp = "7c7c8626-c0f5-45a2-8357-adf645ba786a",
                            DateOfBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfRegistration = new DateTime(2023, 5, 7, 18, 28, 42, 960, DateTimeKind.Local).AddTicks(9886),
                            Email = "john.doe@example.com",
                            EmailConfirmed = true,
                            FirstName = "John",
                            Gender = "Male",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHN.DOE@EXAMPLE.COM",
                            NormalizedName = "JOHNDOE",
                            NormalizedUserName = "JOHNDOE",
                            PasswordHash = "AQAAAAIAAYagAAAAEF8UJpRZELErcLI9NiaqNXEP10f6jA59l9erdSmXtyK0eO8xYUZ6CBI3jByW0tcaBA==",
                            PhoneNumber = "0544 372 12 11",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d55aefcb-8c1d-4af5-abd1-f6b66e35d1b7",
                            TwoFactorEnabled = false,
                            UserName = "johndoe"
                        },
                        new
                        {
                            Id = "35891788-47d3-4645-87f0-fda34734bab3",
                            AccessFailedCount = 0,
                            Address = "9876 Maple Street, New York",
                            ConcurrencyStamp = "03152b0b-279c-4722-8232-20e8c00a8b33",
                            DateOfBirth = new DateTime(1992, 10, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfRegistration = new DateTime(2023, 5, 7, 18, 28, 42, 960, DateTimeKind.Local).AddTicks(9905),
                            Email = "bob.smith@example.com",
                            EmailConfirmed = false,
                            FirstName = "Bob",
                            Gender = "Male",
                            LastName = "Smith",
                            LockoutEnabled = false,
                            NormalizedEmail = "BOB.SMITH@EXAMPLE.COM",
                            NormalizedName = "BOBSMİTH",
                            NormalizedUserName = "BOBSMITH",
                            PasswordHash = "AQAAAAIAAYagAAAAEAyZyamIj6Gjh5ge9inA60dYM06gtR1wIEfV7wLUeHnzKocjW/iCBIOovp38f5YR5w==",
                            PhoneNumber = "0544 372 51 33",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bb4dfe53-41c1-4d75-8561-82fd0cf17731",
                            TwoFactorEnabled = false,
                            UserName = "bobsmith"
                        },
                        new
                        {
                            Id = "211e2b50-d08d-4dc7-9944-de813060f3df",
                            AccessFailedCount = 0,
                            Address = "1234 Elm Street",
                            ConcurrencyStamp = "8e2bda99-afa1-481a-b89d-921ad2bc209c",
                            DateOfBirth = new DateTime(1995, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfRegistration = new DateTime(2023, 5, 7, 18, 28, 42, 960, DateTimeKind.Local).AddTicks(9917),
                            Email = "emma.johnson@example.com",
                            EmailConfirmed = true,
                            FirstName = "Emma",
                            Gender = "Female",
                            LastName = "Johnson",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMMA.JOHNSON@EXAMPLE.COM",
                            NormalizedName = "EMMAJOHNSON",
                            NormalizedUserName = "EMMA.JOHNSON",
                            PasswordHash = "AQAAAAIAAYagAAAAELZWtXHdtJB4fv4HAPPpZnFPx6JhFbUpDR53Ml1CZ1JANDdgloVibbqpJ6rtqySQkA==",
                            PhoneNumber = "0532 872 42 55",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ee8a571c-372a-43af-b3cb-d68e45042449",
                            TwoFactorEnabled = false,
                            UserName = "emma.johnson"
                        },
                        new
                        {
                            Id = "5c4080ce-3cee-4051-8660-4b7f208681ce",
                            AccessFailedCount = 0,
                            Address = "3456 Pine Road, Chicago",
                            ConcurrencyStamp = "7d0edb80-8ddc-43de-a644-d397ba9fd072",
                            DateOfBirth = new DateTime(1998, 3, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfRegistration = new DateTime(2023, 5, 7, 18, 28, 42, 960, DateTimeKind.Local).AddTicks(9932),
                            Email = "emma.brown@example.com",
                            EmailConfirmed = true,
                            FirstName = "Emma",
                            Gender = "Female",
                            LastName = "Brown",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMMA.BROWN@EXAMPLE.COM",
                            NormalizedName = "EMMABROWN",
                            NormalizedUserName = "EMMAB",
                            PasswordHash = "AQAAAAIAAYagAAAAEL6WAydNgyWAwIl4y8urGyc6976kUk6c1HSMw2xjdv8Q7ixy223SE1g7GG3Mi2cP2A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6851833c-6ff6-474e-8ecd-c3ef39f37539",
                            TwoFactorEnabled = false,
                            UserName = "emmab"
                        },
                        new
                        {
                            Id = "d9034f11-8877-4c14-ae85-442d2449b547",
                            AccessFailedCount = 0,
                            Address = "2345 Cedar Avenue, San Francisco",
                            ConcurrencyStamp = "f0dbc3f9-c3e3-451f-8903-a03a8db7000c",
                            DateOfBirth = new DateTime(1980, 11, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfRegistration = new DateTime(2023, 5, 7, 18, 28, 42, 960, DateTimeKind.Local).AddTicks(9947),
                            Email = "david.lee@example.com",
                            EmailConfirmed = true,
                            FirstName = "David",
                            Gender = "Male",
                            LastName = "Lee",
                            LockoutEnabled = false,
                            NormalizedEmail = "DAVID.LEE@EXAMPLE.COM",
                            NormalizedName = "DAVİDLEE",
                            NormalizedUserName = "DAVIDL",
                            PasswordHash = "AQAAAAIAAYagAAAAEHh0sYQ7moUiJ79K8gJXJDMIHfXAD/SAHfvOYO8cSdnW2V2Ir6d30Lp3ZjX1AjUUiw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "56ef86c3-6402-48e1-8023-02b421b37039",
                            TwoFactorEnabled = false,
                            UserName = "davidl"
                        },
                        new
                        {
                            Id = "0f80dbad-d5f4-4f82-a780-165aa66b7d07",
                            AccessFailedCount = 0,
                            Address = "8765 Birch Street, Miami",
                            ConcurrencyStamp = "ddf53604-dbef-4b5e-81e1-92a8393251e3",
                            DateOfBirth = new DateTime(1995, 7, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfRegistration = new DateTime(2023, 5, 7, 18, 28, 42, 960, DateTimeKind.Local).AddTicks(9958),
                            Email = "sophia.chen@example.com",
                            EmailConfirmed = false,
                            FirstName = "Sophia",
                            Gender = "Female",
                            LastName = "Chen",
                            LockoutEnabled = false,
                            NormalizedEmail = "SOPHIA.CHEN@EXAMPLE.COM",
                            NormalizedName = "SOPHİACHEN",
                            NormalizedUserName = "SOPHIAC",
                            PasswordHash = "AQAAAAIAAYagAAAAEMpFNnDMVnazAgI5eN6S/h1AP8HOLvKzUwiSjKKAlleM/fgPOW/tkv5LZB6tmGywHg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5ff90af8-4d61-4ff7-b796-7f2903008e1b",
                            TwoFactorEnabled = false,
                            UserName = "sophiac"
                        });
                });

            modelBuilder.Entity("Counseling.Entity.Entity.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsApproved = true,
                            Url = "Image1"
                        });
                });

            modelBuilder.Entity("Counseling.Entity.Entity.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Price")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TherapistId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Seans açıklaması 1",
                            IsApproved = true,
                            IsConfirmed = true,
                            Price = 500m,
                            TherapistId = 1,
                            Url = "service1"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Seans açıklaması 2",
                            IsApproved = true,
                            IsConfirmed = true,
                            Price = 400m,
                            TherapistId = 2,
                            Url = "service2"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Seans açıklaması 3",
                            IsApproved = true,
                            IsConfirmed = true,
                            Price = 200m,
                            TherapistId = 3,
                            Url = "service3"
                        });
                });

            modelBuilder.Entity("Counseling.Entity.Entity.ServiceCategory", b =>
                {
                    b.Property<int>("ServiceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ServiceId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ServiceCategories");

                    b.HasData(
                        new
                        {
                            ServiceId = 1,
                            CategoryId = 1
                        },
                        new
                        {
                            ServiceId = 1,
                            CategoryId = 2
                        },
                        new
                        {
                            ServiceId = 2,
                            CategoryId = 4
                        },
                        new
                        {
                            ServiceId = 3,
                            CategoryId = 3
                        },
                        new
                        {
                            ServiceId = 3,
                            CategoryId = 5
                        });
                });

            modelBuilder.Entity("Counseling.Entity.Entity.ServiceTherapist", b =>
                {
                    b.Property<int>("ServiceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TherapistId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ServiceId", "TherapistId");

                    b.HasIndex("ServiceId")
                        .IsUnique();

                    b.HasIndex("TherapistId");

                    b.ToTable("ServiceTherapists");

                    b.HasData(
                        new
                        {
                            ServiceId = 1,
                            TherapistId = 2
                        },
                        new
                        {
                            ServiceId = 2,
                            TherapistId = 1
                        },
                        new
                        {
                            ServiceId = 3,
                            TherapistId = 3
                        });
                });

            modelBuilder.Entity("Counseling.Entity.Entity.Therapist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("EducationId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TitleId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EducationId");

                    b.HasIndex("TitleId");

                    b.HasIndex("UserId");

                    b.ToTable("Therapists");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Therapist Açıklama 1",
                            EducationId = 1,
                            IsApproved = true,
                            IsOnline = false,
                            TitleId = 1,
                            Url = "therapist1",
                            UserId = "86babe7e-9dea-4cf2-9faf-4439b64d13ba"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Therapist Açıklama 2",
                            EducationId = 2,
                            IsApproved = true,
                            IsOnline = false,
                            TitleId = 1,
                            Url = "therapist2",
                            UserId = "35891788-47d3-4645-87f0-fda34734bab3"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Therapist Açıklama 3",
                            EducationId = 3,
                            IsApproved = true,
                            IsOnline = false,
                            TitleId = 1,
                            Url = "therapist3",
                            UserId = "211e2b50-d08d-4dc7-9944-de813060f3df"
                        });
                });

            modelBuilder.Entity("Counseling.Entity.Entity.TherapistCategory", b =>
                {
                    b.Property<int>("TherapistId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TherapistId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("TherapistCategories");

                    b.HasData(
                        new
                        {
                            TherapistId = 1,
                            CategoryId = 1
                        },
                        new
                        {
                            TherapistId = 1,
                            CategoryId = 2
                        },
                        new
                        {
                            TherapistId = 1,
                            CategoryId = 3
                        },
                        new
                        {
                            TherapistId = 1,
                            CategoryId = 4
                        },
                        new
                        {
                            TherapistId = 2,
                            CategoryId = 1
                        },
                        new
                        {
                            TherapistId = 2,
                            CategoryId = 5
                        },
                        new
                        {
                            TherapistId = 2,
                            CategoryId = 7
                        },
                        new
                        {
                            TherapistId = 3,
                            CategoryId = 1
                        },
                        new
                        {
                            TherapistId = 3,
                            CategoryId = 8
                        });
                });

            modelBuilder.Entity("Counseling.Entity.Entity.TherapistTitle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TherapistTitles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Uzman Psikolog"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Klinik Psikolog"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Sağlık Psikoloğu"
                        },
                        new
                        {
                            Id = 4,
                            Name = "İş ve Örgüt Psikoloğu"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Ruh Sağlığı ve Rehabilitasyon Psikoloğu"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Uzman Psikolojik Danışman"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Okul Psikolojik Danışmanı"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Kariyer Psikolojik Danışmanı"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Bağımlılık Danışmanı"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Sosyal Hizmet Uzmanı"
                        });
                });

            modelBuilder.Entity("Counseling.Entity.Entity.University", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Universities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Adana Alparslan Türkeş Bilim ve Teknoloji Üniversitesi"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Adana Bilim ve Teknoloji Üniversitesi"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Adıyaman Üniversitesi"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Afyonkarahisar Sağlık Bilimleri Üniversitesi"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Afyonkarahisar Sandıklı Onmyo Meslek Yüksekokulu"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Ağrı İbrahim Çeçen Üniversitesi"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Ahi Evran Üniversitesi"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Akdeniz Üniversitesi"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Aksaray Üniversitesi"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Alanya Alaaddin Keykubat Üniversitesi"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Altınbaş Üniversitesi"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Amasya Üniversitesi"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Anadolu Üniversitesi"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Ankara Hacı Bayram Veli Üniversitesi"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Ankara Üniversitesi"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Ankara Yıldırım Beyazıt Üniversitesi"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Antalya Akev Üniversitesi"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Antalya Bilim Üniversitesi"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Arda Üniversitesi"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Ardahan Üniversitesi"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Artvin Çoruh Üniversitesi"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Atatürk Üniversitesi"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Avrasya Üniversitesi"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Aydın Adnan Menderes Üniversitesi"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Aydın Üniversitesi"
                        },
                        new
                        {
                            Id = 26,
                            Name = "Bahçeşehir Üniversitesi"
                        },
                        new
                        {
                            Id = 27,
                            Name = "Balıkesir Üniversitesi"
                        },
                        new
                        {
                            Id = 28,
                            Name = "Bandırma Onyedi Eylül Üniversitesi"
                        },
                        new
                        {
                            Id = 29,
                            Name = "Bartın Üniversitesi"
                        },
                        new
                        {
                            Id = 30,
                            Name = "Batman Üniversitesi"
                        },
                        new
                        {
                            Id = 31,
                            Name = "Beykent Üniversitesi"
                        },
                        new
                        {
                            Id = 32,
                            Name = "Bilecik Şeyh Edebali Üniversitesi"
                        },
                        new
                        {
                            Id = 33,
                            Name = "Bingöl Üniversitesi"
                        },
                        new
                        {
                            Id = 34,
                            Name = "Bursa Orhangazi Üniversitesi"
                        },
                        new
                        {
                            Id = 35,
                            Name = "Bursa Teknik Üniversitesi"
                        },
                        new
                        {
                            Id = 36,
                            Name = "Çağ Üniversitesi"
                        },
                        new
                        {
                            Id = 37,
                            Name = "Çankaya Üniversitesi"
                        },
                        new
                        {
                            Id = 38,
                            Name = "Çanakkale Onsekiz Mart Üniversitesi"
                        },
                        new
                        {
                            Id = 39,
                            Name = "Çankırı Karatekin Üniversitesi"
                        },
                        new
                        {
                            Id = 40,
                            Name = "Çukurova Üniversitesi"
                        },
                        new
                        {
                            Id = 41,
                            Name = "Dicle Üniversitesi"
                        },
                        new
                        {
                            Id = 42,
                            Name = "Dokuz Eylül Üniversitesi"
                        },
                        new
                        {
                            Id = 43,
                            Name = "Dumlupınar Üniversitesi"
                        },
                        new
                        {
                            Id = 44,
                            Name = "Düzce Üniversitesi"
                        },
                        new
                        {
                            Id = 45,
                            Name = "Ege Üniversitesi"
                        },
                        new
                        {
                            Id = 46,
                            Name = "Erciyes Üniversitesi"
                        },
                        new
                        {
                            Id = 47,
                            Name = "Erzincan Üniversitesi"
                        },
                        new
                        {
                            Id = 48,
                            Name = "Erzurum Atatürk Üniversitesi"
                        },
                        new
                        {
                            Id = 49,
                            Name = "Erzurum Teknik Üniversitesi"
                        },
                        new
                        {
                            Id = 50,
                            Name = "Eskişehir Osmangazi Üniversitesi"
                        },
                        new
                        {
                            Id = 51,
                            Name = "Eskişehir Teknik Üniversitesi"
                        },
                        new
                        {
                            Id = 52,
                            Name = "Fırat Üniversitesi"
                        },
                        new
                        {
                            Id = 53,
                            Name = "Galatasaray Üniversitesi"
                        },
                        new
                        {
                            Id = 54,
                            Name = "Gaziantep Üniversitesi"
                        },
                        new
                        {
                            Id = 55,
                            Name = "Gaziantep Bilim ve Teknoloji Üniversitesi"
                        },
                        new
                        {
                            Id = 56,
                            Name = "Gazi Üniversitesi"
                        },
                        new
                        {
                            Id = 57,
                            Name = "Gebze Teknik Üniversitesi"
                        },
                        new
                        {
                            Id = 58,
                            Name = "Giresun Üniversitesi"
                        },
                        new
                        {
                            Id = 59,
                            Name = "Gümüşhane Üniversitesi"
                        },
                        new
                        {
                            Id = 60,
                            Name = "Hacettepe Üniversitesi"
                        },
                        new
                        {
                            Id = 61,
                            Name = "Hakkari Üniversitesi"
                        },
                        new
                        {
                            Id = 62,
                            Name = "Harran Üniversitesi"
                        },
                        new
                        {
                            Id = 63,
                            Name = "Hitit Üniversitesi"
                        },
                        new
                        {
                            Id = 64,
                            Name = "Iğdır Üniversitesi"
                        },
                        new
                        {
                            Id = 65,
                            Name = "İnönü Üniversitesi"
                        },
                        new
                        {
                            Id = 66,
                            Name = "İstanbul Medeniyet Üniversitesi"
                        },
                        new
                        {
                            Id = 67,
                            Name = "İstanbul Sabahattin Zaim Üniversitesi"
                        },
                        new
                        {
                            Id = 68,
                            Name = "İstanbul Teknik Üniversitesi"
                        },
                        new
                        {
                            Id = 69,
                            Name = "İstanbul Ticaret Üniversitesi"
                        },
                        new
                        {
                            Id = 70,
                            Name = "İstanbul Üniversitesi"
                        },
                        new
                        {
                            Id = 71,
                            Name = "İstinye Üniversitesi"
                        },
                        new
                        {
                            Id = 72,
                            Name = "İzmir Bakırçay Üniversitesi"
                        },
                        new
                        {
                            Id = 73,
                            Name = "İzmir Demokrasi Üniversitesi"
                        },
                        new
                        {
                            Id = 74,
                            Name = "İzmir Ekonomi Üniversitesi"
                        },
                        new
                        {
                            Id = 75,
                            Name = "İzmir Kâtip Çelebi Üniversitesi"
                        },
                        new
                        {
                            Id = 76,
                            Name = "Kafkas Üniversitesi"
                        },
                        new
                        {
                            Id = 77,
                            Name = "Kahramanmaraş İstiklal Üniversitesi"
                        },
                        new
                        {
                            Id = 78,
                            Name = "Kahramanmaraş Sütçü İmam Üniversitesi"
                        },
                        new
                        {
                            Id = 79,
                            Name = "Karabük Üniversitesi"
                        },
                        new
                        {
                            Id = 80,
                            Name = "Karadeniz Teknik Üniversitesi"
                        },
                        new
                        {
                            Id = 81,
                            Name = "Karamanoğlu Mehmetbey Üniversitesi"
                        },
                        new
                        {
                            Id = 82,
                            Name = "Kastamonu Üniversitesi"
                        },
                        new
                        {
                            Id = 83,
                            Name = "Koç Üniversitesi"
                        },
                        new
                        {
                            Id = 84,
                            Name = "Konya Necmettin Erbakan Üniversitesi"
                        },
                        new
                        {
                            Id = 85,
                            Name = "KTO Karatay Üniversitesi"
                        },
                        new
                        {
                            Id = 86,
                            Name = "Malatya Turgut Özal Üniversitesi"
                        },
                        new
                        {
                            Id = 87,
                            Name = "Manisa Celal Bayar Üniversitesi"
                        },
                        new
                        {
                            Id = 88,
                            Name = "Mardin Artuklu Üniversitesi"
                        },
                        new
                        {
                            Id = 89,
                            Name = "Marmara Üniversitesi"
                        },
                        new
                        {
                            Id = 90,
                            Name = "Mehmet Akif Ersoy Üniversitesi"
                        },
                        new
                        {
                            Id = 91,
                            Name = "Mersin Üniversitesi"
                        },
                        new
                        {
                            Id = 92,
                            Name = "Mimar Sinan Güzel Sanatlar Üniversitesi"
                        },
                        new
                        {
                            Id = 93,
                            Name = "Muğla Sıtkı Koçman Üniversitesi"
                        },
                        new
                        {
                            Id = 94,
                            Name = "Muş Alparslan Üniversitesi"
                        },
                        new
                        {
                            Id = 95,
                            Name = "Namık Kemal Üniversitesi"
                        },
                        new
                        {
                            Id = 96,
                            Name = "Nevşehir Hacı Bektaş Veli Üniversitesi"
                        },
                        new
                        {
                            Id = 97,
                            Name = "Niğde Ömer Halisdemir Üniversitesi"
                        },
                        new
                        {
                            Id = 98,
                            Name = "Nuh Naci Yazgan Üniversitesi"
                        },
                        new
                        {
                            Id = 99,
                            Name = "Ordu Üniversitesi"
                        },
                        new
                        {
                            Id = 100,
                            Name = "Orta Doğu Teknik Üniversitesi"
                        },
                        new
                        {
                            Id = 101,
                            Name = "Osmaniye Korkut Ata Üniversitesi"
                        },
                        new
                        {
                            Id = 102,
                            Name = "Pamukkale Üniversitesi"
                        },
                        new
                        {
                            Id = 103,
                            Name = "Recep Tayyip Erdoğan Üniversitesi"
                        },
                        new
                        {
                            Id = 104,
                            Name = "Sakarya Üniversitesi"
                        },
                        new
                        {
                            Id = 105,
                            Name = "Selahaddin Eyyubi Üniversitesi"
                        },
                        new
                        {
                            Id = 106,
                            Name = "Siirt Üniversitesi"
                        },
                        new
                        {
                            Id = 107,
                            Name = "Sinop Üniversitesi"
                        },
                        new
                        {
                            Id = 108,
                            Name = "Sivas Cumhuriyet Üniversitesi"
                        },
                        new
                        {
                            Id = 109,
                            Name = "Süleyman Demirel Üniversitesi"
                        },
                        new
                        {
                            Id = 110,
                            Name = "Trakya Üniversitesi"
                        },
                        new
                        {
                            Id = 111,
                            Name = "Tunceli Üniversitesi"
                        },
                        new
                        {
                            Id = 112,
                            Name = "Uşak Üniversitesi"
                        },
                        new
                        {
                            Id = 113,
                            Name = "Yalova Üniversitesi"
                        },
                        new
                        {
                            Id = 114,
                            Name = "Yıldırım Beyazıt Üniversitesi"
                        },
                        new
                        {
                            Id = 115,
                            Name = "Yozgat Bozok Üniversitesi"
                        },
                        new
                        {
                            Id = 116,
                            Name = "Zonguldak Bülent Ecevit Üniversitesi"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "b7082603-2d69-4adc-bc4e-1e294a75cd5a",
                            RoleId = "f189930b-5dd4-4088-b246-438f75481c4a"
                        },
                        new
                        {
                            UserId = "eba9d9f5-bcde-4039-8e38-2f3292ed46b6",
                            RoleId = "7192fa71-cef8-4480-a9d6-c514c42c1d1b"
                        },
                        new
                        {
                            UserId = "86babe7e-9dea-4cf2-9faf-4439b64d13ba",
                            RoleId = "eb1774ff-20bd-48df-8cf8-7b3b10a1f9df"
                        },
                        new
                        {
                            UserId = "35891788-47d3-4645-87f0-fda34734bab3",
                            RoleId = "eb1774ff-20bd-48df-8cf8-7b3b10a1f9df"
                        },
                        new
                        {
                            UserId = "211e2b50-d08d-4dc7-9944-de813060f3df",
                            RoleId = "eb1774ff-20bd-48df-8cf8-7b3b10a1f9df"
                        },
                        new
                        {
                            UserId = "5c4080ce-3cee-4051-8660-4b7f208681ce",
                            RoleId = "82cfe151-6703-4c5e-aa82-c653d00bb7ba"
                        },
                        new
                        {
                            UserId = "d9034f11-8877-4c14-ae85-442d2449b547",
                            RoleId = "82cfe151-6703-4c5e-aa82-c653d00bb7ba"
                        },
                        new
                        {
                            UserId = "0f80dbad-d5f4-4f82-a780-165aa66b7d07",
                            RoleId = "82cfe151-6703-4c5e-aa82-c653d00bb7ba"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Counseling.Entity.Concrete.Reservation", b =>
                {
                    b.HasOne("Counseling.Entity.Entity.ClientService", "ClientService")
                        .WithMany()
                        .HasForeignKey("ClientServiceClientId", "ClientServiceServiceId");

                    b.HasOne("Counseling.Entity.Entity.ClientTherapist", "ClientTherapist")
                        .WithMany()
                        .HasForeignKey("ClientTherapistClientId", "ClientTherapistTherapistId");

                    b.Navigation("ClientService");

                    b.Navigation("ClientTherapist");
                });

            modelBuilder.Entity("Counseling.Entity.Entity.Certificate", b =>
                {
                    b.HasOne("Counseling.Entity.Entity.Therapist", null)
                        .WithMany("Certificates")
                        .HasForeignKey("TherapistId");
                });

            modelBuilder.Entity("Counseling.Entity.Entity.Client", b =>
                {
                    b.HasOne("Counseling.Entity.Entity.Identitiy.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Counseling.Entity.Entity.ClientService", b =>
                {
                    b.HasOne("Counseling.Entity.Entity.Client", "Client")
                        .WithMany("ClientServices")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Counseling.Entity.Entity.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Counseling.Entity.Entity.ClientTherapist", b =>
                {
                    b.HasOne("Counseling.Entity.Entity.Client", "Client")
                        .WithMany("ClientTherapists")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Counseling.Entity.Entity.Therapist", "Therapist")
                        .WithMany("ClientTherapists")
                        .HasForeignKey("TherapistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Therapist");
                });

            modelBuilder.Entity("Counseling.Entity.Entity.Education", b =>
                {
                    b.HasOne("Counseling.Entity.Entity.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Counseling.Entity.Entity.University", "University")
                        .WithMany()
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("University");
                });

            modelBuilder.Entity("Counseling.Entity.Entity.Identitiy.User", b =>
                {
                    b.HasOne("Counseling.Entity.Entity.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Counseling.Entity.Entity.ServiceCategory", b =>
                {
                    b.HasOne("Counseling.Entity.Entity.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Counseling.Entity.Entity.Service", "Service")
                        .WithMany("ServiceCategories")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Counseling.Entity.Entity.ServiceTherapist", b =>
                {
                    b.HasOne("Counseling.Entity.Entity.Service", "Service")
                        .WithOne("ServiceTherapist")
                        .HasForeignKey("Counseling.Entity.Entity.ServiceTherapist", "ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Counseling.Entity.Entity.Therapist", "Therapist")
                        .WithMany()
                        .HasForeignKey("TherapistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("Therapist");
                });

            modelBuilder.Entity("Counseling.Entity.Entity.Therapist", b =>
                {
                    b.HasOne("Counseling.Entity.Entity.Education", "Education")
                        .WithMany()
                        .HasForeignKey("EducationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Counseling.Entity.Entity.TherapistTitle", "Title")
                        .WithMany()
                        .HasForeignKey("TitleId");

                    b.HasOne("Counseling.Entity.Entity.Identitiy.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Education");

                    b.Navigation("Title");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Counseling.Entity.Entity.TherapistCategory", b =>
                {
                    b.HasOne("Counseling.Entity.Entity.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Counseling.Entity.Entity.Therapist", "Therapist")
                        .WithMany("TherapistCategories")
                        .HasForeignKey("TherapistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Therapist");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Counseling.Entity.Entity.Identitiy.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Counseling.Entity.Entity.Identitiy.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Counseling.Entity.Entity.Identitiy.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Counseling.Entity.Entity.Identitiy.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Counseling.Entity.Entity.Identitiy.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Counseling.Entity.Entity.Identitiy.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Counseling.Entity.Entity.Client", b =>
                {
                    b.Navigation("ClientServices");

                    b.Navigation("ClientTherapists");
                });

            modelBuilder.Entity("Counseling.Entity.Entity.Service", b =>
                {
                    b.Navigation("ServiceCategories");

                    b.Navigation("ServiceTherapist");
                });

            modelBuilder.Entity("Counseling.Entity.Entity.Therapist", b =>
                {
                    b.Navigation("Certificates");

                    b.Navigation("ClientTherapists");

                    b.Navigation("TherapistCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
